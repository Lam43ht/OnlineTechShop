package com.example.onlinetechshop.Activity

import android.content.Intent
import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.viewModels
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.material.TextButton
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.colorResource
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.constraintlayout.compose.ConstraintLayout
import com.example.onlinetechshop.R
import com.example.onlinetechshop.ViewModel.AuthState
import com.example.onlinetechshop.ViewModel.AuthViewModel
import com.example.onlinetechshop.pages.AuthActivity
import com.google.firebase.auth.EmailAuthProvider
import com.google.firebase.auth.FirebaseAuth

class ProfileActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        val authViewModel by viewModels<AuthViewModel>()
        super.onCreate(savedInstanceState)
        setContent {
            ProfileScreen(
                authViewModel = authViewModel,
                onSignOut = {
                    startActivity(Intent(this, AuthActivity::class.java))
                    finish()
                },
                onBackClick = { finish() }
            )
        }
    }
}

@Composable
fun ProfileScreen(
    authViewModel: AuthViewModel,
    onSignOut: () -> Unit,
    onBackClick: () -> Unit
) {
    val authState = authViewModel.authState.observeAsState()
    val currentUser = FirebaseAuth.getInstance().currentUser
    val context = LocalContext.current

    var showChangePasswordDialog by remember { mutableStateOf(false) }
    var currentPassword by remember { mutableStateOf("") }
    var newPassword by remember { mutableStateOf("") }

    // N·∫øu ƒëƒÉng xu·∫•t, quay l·∫°i login
    LaunchedEffect(authState.value) {
        if (authState.value is AuthState.Unauthenticated) {
            onSignOut()
        }
    }

    // UI ch√≠nh
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(WindowInsets.statusBars.asPaddingValues()) // ƒë·ªÉ kh√¥ng b·ªã l·∫•n status bar
            .padding(16.dp)
    ) {
        // Header v·ªõi n√∫t back
        ConstraintLayout(modifier = Modifier.fillMaxWidth()) {
            val (backBtn, titleTxt) = createRefs()

            Text(
                text = "Th√¥ng Tin T√†i Kho·∫£n",
                fontSize = 25.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier
                    .constrainAs(titleTxt) { centerTo(parent) }
                    .padding(bottom = 5.dp)
            )

            Image(painter = painterResource(R.drawable.back),
                contentDescription = null,
                modifier = Modifier
                    .clickable{
                        onBackClick()
                    }
                    .constrainAs(backBtn){
                        top.linkTo(parent.top)
                        bottom.linkTo(parent.bottom)
                        start.linkTo(parent.start)
                    }
            )
        }

        Spacer(modifier = Modifier.height(24.dp))

        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(containerColor = Color(0xFFF5F5F5)),
            elevation = CardDefaults.cardElevation(2.dp)
        ) {
            Column(modifier = Modifier.padding(16.dp)) {
                Text("üìß Email", fontWeight = FontWeight.Medium, color = Color.Gray)
                Text(currentUser?.email ?: "Kh√¥ng c√≥", fontSize = 20.sp, fontWeight = FontWeight.SemiBold)

                Spacer(modifier = Modifier.height(12.dp))

                Text("üÜî UID", fontWeight = FontWeight.Medium, color = Color.Gray)
                Text(currentUser?.uid ?: "Kh√¥ng c√≥", fontSize = 16.sp)
            }
        }

        Spacer(modifier = Modifier.height(32.dp))

        Button(
            onClick = { showChangePasswordDialog = true },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF1976D2))
        ) {
            Text("üîí ƒê·ªïi m·∫≠t kh·∫©u", color = Color.White, fontSize = 16.sp)
        }

        Spacer(modifier = Modifier.height(16.dp))

        Button(
            onClick = { authViewModel.signout() },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            colors = ButtonDefaults.buttonColors(containerColor = colorResource(R.color.green))
        ) {
            Text("üö™ ƒêƒÉng xu·∫•t", color = Color.White, fontSize = 16.sp)
        }

        if (showChangePasswordDialog) {
            AlertDialog(
                onDismissRequest = { showChangePasswordDialog = false },
                title = {
                    Text("üîê ƒê·ªïi m·∫≠t kh·∫©u", fontWeight = FontWeight.Bold)
                },
                text = {
                    Column {
                        OutlinedTextField(
                            value = currentPassword,
                            onValueChange = { currentPassword = it },
                            label = { Text("M·∫≠t kh·∫©u hi·ªán t·∫°i") },
                            singleLine = true
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        OutlinedTextField(
                            value = newPassword,
                            onValueChange = { newPassword = it },
                            label = { Text("M·∫≠t kh·∫©u m·ªõi") },
                            singleLine = true
                        )
                    }
                },
                confirmButton = {
                    TextButton(onClick = {
                        val email = currentUser?.email ?: return@TextButton
                        val credential = EmailAuthProvider.getCredential(email, currentPassword)

                        currentUser.reauthenticate(credential)
                            .addOnSuccessListener {
                                if (newPassword.length < 6) {
                                    Toast.makeText(context, "M·∫≠t kh·∫©u m·ªõi ph·∫£i ‚â• 6 k√Ω t·ª±", Toast.LENGTH_SHORT).show()
                                } else {
                                    currentUser.updatePassword(newPassword)
                                        .addOnSuccessListener {
                                            Toast.makeText(context, "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng", Toast.LENGTH_SHORT).show()
                                            showChangePasswordDialog = false
                                            currentPassword = ""
                                            newPassword = ""
                                        }
                                        .addOnFailureListener {
                                            Toast.makeText(context, "L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u", Toast.LENGTH_SHORT).show()
                                        }
                                }
                            }
                            .addOnFailureListener {
                                Toast.makeText(context, "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng", Toast.LENGTH_SHORT).show()
                            }
                    }) {
                        Text("X√°c nh·∫≠n", color = MaterialTheme.colorScheme.primary)
                    }
                },
                dismissButton = {
                    TextButton(onClick = { showChangePasswordDialog = false }) {
                        Text("Hu·ª∑", color = MaterialTheme.colorScheme.secondary)
                    }
                }
            )
        }
    }
}
